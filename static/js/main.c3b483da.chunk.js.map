{"version":3,"sources":["DigitButton.js","OperationButton.js","App.js","index.js"],"names":["DigitButton","_ref","dispatch","digit","_jsx","onClick","type","ACTIONS","ADD_DIGIT","payload","children","OperationButton","operation","CHOOSE_OPERATION","CLEAR","DELETE_DIGIT","EVALUATE","reducer","state","overwrite","_objectSpread","currentOperand","includes","concat","previousOperand","evaluate","length","slice","_ref2","prev","parseFloat","current","isNaN","computation","toString","INTEGER_FORMATTER","Intl","NumberFormat","maximumFractionDigits","formatOperand","operand","_operand$split","split","_operand$split2","_slicedToArray","integer","decimal","format","App","_useReducer","useReducer","_useReducer2","_useReducer2$","_jsxs","className","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"gNAEe,SAASA,EAAWC,GAAuB,IAApBC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MAC9C,OACEC,cAAA,UACEC,QAAS,kBAAMH,EAAS,CAAEI,KAAMC,EAAQC,UAAWC,QAAS,CAAEN,UAAU,EAACO,SAExEP,GAGP,CCRe,SAASQ,EAAeV,GAA2B,IAAxBC,EAAQD,EAARC,SAAUU,EAASX,EAATW,UAClD,OACER,cAAA,UACEC,QAAS,kBACPH,EAAS,CAAEI,KAAMC,EAAQM,iBAAkBJ,QAAS,CAAEG,cAAc,EACrEF,SAEAE,GAGP,C,UCPaL,EAAU,CACrBC,UAAW,YACXK,iBAAkB,mBAClBC,MAAO,QACPC,aAAc,eACdC,SAAU,YAGZ,SAASC,EAAQC,EAAKjB,GAAsB,IAAlBK,EAAIL,EAAJK,KAAMG,EAAOR,EAAPQ,QAC9B,OAAQH,GACN,KAAKC,EAAQC,UACX,OAAIU,EAAMC,UACRC,wBAAA,GACKF,GAAK,IACRG,eAAgBZ,EAAQN,MACxBgB,WAAW,IAGO,MAAlBV,EAAQN,OAA0C,MAAzBe,EAAMG,gBAGb,MAAlBZ,EAAQN,OAAiBe,EAAMG,eAAeC,SAAS,KAFlDJ,EAMTE,wBAAA,GACKF,GAAK,IACRG,eAAe,GAADE,OAAKL,EAAMG,gBAAkB,IAAEE,OAAGd,EAAQN,SAE5D,KAAKI,EAAQM,iBACX,OAA4B,MAAxBK,EAAMG,gBAAmD,MAAzBH,EAAMM,gBACjCN,EAGmB,MAAxBA,EAAMG,eACRD,wBAAA,GACKF,GAAK,IACRN,UAAWH,EAAQG,YAIM,MAAzBM,EAAMM,gBACRJ,wBAAA,GACKF,GAAK,IACRN,UAAWH,EAAQG,UACnBY,gBAAiBN,EAAMG,eACvBA,eAAgB,OAIpBD,wBAAA,GACKF,GAAK,IACRM,gBAAiBC,EAASP,GAC1BN,UAAWH,EAAQG,UACnBS,eAAgB,OAEpB,KAAKd,EAAQO,MACX,MAAO,CAAC,EACV,KAAKP,EAAQQ,aACX,OAAIG,EAAMC,UACRC,wBAAA,GACKF,GAAK,IACRC,WAAW,EACXE,eAAgB,OAGQ,MAAxBH,EAAMG,eAA+BH,EACL,IAAhCA,EAAMG,eAAeK,OACvBN,wBAAA,GAAYF,GAAK,IAAEG,eAAgB,OAGrCD,wBAAA,GACKF,GAAK,IACRG,eAAgBH,EAAMG,eAAeM,MAAM,GAAI,KAEnD,KAAKpB,EAAQS,SACX,OACqB,MAAnBE,EAAMN,WACkB,MAAxBM,EAAMG,gBACmB,MAAzBH,EAAMM,gBAECN,EAGTE,wBAAA,GACKF,GAAK,IACRC,WAAW,EACXK,gBAAiB,KACjBZ,UAAW,KACXS,eAAgBI,EAASP,KAGjC,CAEA,SAASO,EAAQG,GAAkD,IAA/CP,EAAcO,EAAdP,eAAgBG,EAAeI,EAAfJ,gBAAiBZ,EAASgB,EAAThB,UAC7CiB,EAAOC,WAAWN,GAClBO,EAAUD,WAAWT,GAC3B,GAAIW,MAAMH,IAASG,MAAMD,GAAU,MAAO,GAC1C,IAAIE,EAAc,GAClB,OAAQrB,GACN,IAAK,IACHqB,EAAcJ,EAAOE,EACrB,MACF,IAAK,IACHE,EAAcJ,EAAOE,EACrB,MACF,IAAK,IACHE,EAAcJ,EAAOE,EACrB,MACF,IAAK,OACHE,EAAcJ,EAAOE,EAIzB,OAAOE,EAAYC,UACrB,CAEA,IAAMC,EAAoB,IAAIC,KAAKC,aAAa,QAAS,CACvDC,sBAAuB,IAEzB,SAASC,EAAcC,GACrB,GAAe,MAAXA,EAAJ,CACA,IAAAC,EAA2BD,EAAQE,MAAM,KAAIC,EAAAC,YAAAH,EAAA,GAAtCI,EAAOF,EAAA,GAAEG,EAAOH,EAAA,GACvB,OAAe,MAAXG,EAAwBX,EAAkBY,OAAOF,GAC/C,GAANtB,OAAUY,EAAkBY,OAAOF,GAAQ,KAAAtB,OAAIuB,EAHpB,CAI7B,CAkDeE,MAhDf,WACE,IAAAC,EAAmEC,qBACjEjC,EACA,CAAC,GACFkC,EAAAP,YAAAK,EAAA,GAAAG,EAAAD,EAAA,GAHQ9B,EAAc+B,EAAd/B,eAAgBG,EAAe4B,EAAf5B,gBAAiBZ,EAASwC,EAATxC,UAAaV,EAAQiD,EAAA,GAK/D,OACEE,eAAA,OAAKC,UAAU,kBAAiB5C,SAAA,CAC9B2C,eAAA,OAAKC,UAAU,SAAQ5C,SAAA,CACrB2C,eAAA,OAAKC,UAAU,mBAAkB5C,SAAA,CAC9B6B,EAAcf,GAAiB,IAAEZ,KAEpCR,cAAA,OAAKkD,UAAU,kBAAiB5C,SAAE6B,EAAclB,QAElDjB,cAAA,UACEkD,UAAU,WACVjD,QAAS,kBAAMH,EAAS,CAAEI,KAAMC,EAAQO,OAAQ,EAACJ,SAClD,OAGDN,cAAA,UAAQC,QAAS,kBAAMH,EAAS,CAAEI,KAAMC,EAAQQ,cAAe,EAACL,SAAC,QAGjEN,cAACO,EAAe,CAACC,UAAU,OAAIV,SAAUA,IACzCE,cAACJ,EAAW,CAACG,MAAM,IAAID,SAAUA,IACjCE,cAACJ,EAAW,CAACG,MAAM,IAAID,SAAUA,IACjCE,cAACJ,EAAW,CAACG,MAAM,IAAID,SAAUA,IACjCE,cAACO,EAAe,CAACC,UAAU,IAAIV,SAAUA,IACzCE,cAACJ,EAAW,CAACG,MAAM,IAAID,SAAUA,IACjCE,cAACJ,EAAW,CAACG,MAAM,IAAID,SAAUA,IACjCE,cAACJ,EAAW,CAACG,MAAM,IAAID,SAAUA,IACjCE,cAACO,EAAe,CAACC,UAAU,IAAIV,SAAUA,IACzCE,cAACJ,EAAW,CAACG,MAAM,IAAID,SAAUA,IACjCE,cAACJ,EAAW,CAACG,MAAM,IAAID,SAAUA,IACjCE,cAACJ,EAAW,CAACG,MAAM,IAAID,SAAUA,IACjCE,cAACO,EAAe,CAACC,UAAU,IAAIV,SAAUA,IACzCE,cAACJ,EAAW,CAACG,MAAM,IAAID,SAAUA,IACjCE,cAACJ,EAAW,CAACG,MAAM,IAAID,SAAUA,IACjCE,cAAA,UACEkD,UAAU,WACVjD,QAAS,kBAAMH,EAAS,CAAEI,KAAMC,EAAQS,UAAW,EAACN,SACrD,QAKP,EC9KA6C,IAASC,OACPpD,cAACqD,IAAMC,WAAU,CAAAhD,SACfN,cAAC4C,EAAG,MAENW,SAASC,eAAe,Q","file":"static/js/main.c3b483da.chunk.js","sourcesContent":["import { ACTIONS } from \"./App\"\n\nexport default function DigitButton({ dispatch, digit }) {\n  return (\n    <button\n      onClick={() => dispatch({ type: ACTIONS.ADD_DIGIT, payload: { digit } })}\n    >\n      {digit}\n    </button>\n  )\n}\n","import { ACTIONS } from \"./App\"\n\nexport default function OperationButton({ dispatch, operation }) {\n  return (\n    <button\n      onClick={() =>\n        dispatch({ type: ACTIONS.CHOOSE_OPERATION, payload: { operation } })\n      }\n    >\n      {operation}\n    </button>\n  )\n}\n","import { useReducer } from \"react\"\nimport DigitButton from \"./DigitButton\"\nimport OperationButton from \"./OperationButton\"\nimport \"./styles.css\"\n\nexport const ACTIONS = {\n  ADD_DIGIT: \"add-digit\",\n  CHOOSE_OPERATION: \"choose-operation\",\n  CLEAR: \"clear\",\n  DELETE_DIGIT: \"delete-digit\",\n  EVALUATE: \"evaluate\",\n}\n\nfunction reducer(state, { type, payload }) {\n  switch (type) {\n    case ACTIONS.ADD_DIGIT:\n      if (state.overwrite) {\n        return {\n          ...state,\n          currentOperand: payload.digit,\n          overwrite: false,\n        }\n      }\n      if (payload.digit === \"0\" && state.currentOperand === \"0\") {\n        return state\n      }\n      if (payload.digit === \".\" && state.currentOperand.includes(\".\")) {\n        return state\n      }\n\n      return {\n        ...state,\n        currentOperand: `${state.currentOperand || \"\"}${payload.digit}`,\n      }\n    case ACTIONS.CHOOSE_OPERATION:\n      if (state.currentOperand == null && state.previousOperand == null) {\n        return state\n      }\n\n      if (state.currentOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation,\n        }\n      }\n\n      if (state.previousOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation,\n          previousOperand: state.currentOperand,\n          currentOperand: null,\n        }\n      }\n\n      return {\n        ...state,\n        previousOperand: evaluate(state),\n        operation: payload.operation,\n        currentOperand: null,\n      }\n    case ACTIONS.CLEAR:\n      return {}\n    case ACTIONS.DELETE_DIGIT:\n      if (state.overwrite) {\n        return {\n          ...state,\n          overwrite: false,\n          currentOperand: null,\n        }\n      }\n      if (state.currentOperand == null) return state\n      if (state.currentOperand.length === 1) {\n        return { ...state, currentOperand: null }\n      }\n\n      return {\n        ...state,\n        currentOperand: state.currentOperand.slice(0, -1),\n      }\n    case ACTIONS.EVALUATE:\n      if (\n        state.operation == null ||\n        state.currentOperand == null ||\n        state.previousOperand == null\n      ) {\n        return state\n      }\n\n      return {\n        ...state,\n        overwrite: true,\n        previousOperand: null,\n        operation: null,\n        currentOperand: evaluate(state),\n      }\n  }\n}\n\nfunction evaluate({ currentOperand, previousOperand, operation }) {\n  const prev = parseFloat(previousOperand)\n  const current = parseFloat(currentOperand)\n  if (isNaN(prev) || isNaN(current)) return \"\"\n  let computation = \"\"\n  switch (operation) {\n    case \"+\":\n      computation = prev + current\n      break\n    case \"-\":\n      computation = prev - current\n      break\n    case \"*\":\n      computation = prev * current\n      break\n    case \"รท\":\n      computation = prev / current\n      break\n  }\n\n  return computation.toString()\n}\n\nconst INTEGER_FORMATTER = new Intl.NumberFormat(\"en-us\", {\n  maximumFractionDigits: 0,\n})\nfunction formatOperand(operand) {\n  if (operand == null) return\n  const [integer, decimal] = operand.split(\".\")\n  if (decimal == null) return INTEGER_FORMATTER.format(integer)\n  return `${INTEGER_FORMATTER.format(integer)}.${decimal}`\n}\n\nfunction App() {\n  const [{ currentOperand, previousOperand, operation }, dispatch] = useReducer(\n    reducer,\n    {}\n  )\n\n  return (\n    <div className=\"calculator-grid\">\n      <div className=\"output\">\n        <div className=\"previous-operand\">\n          {formatOperand(previousOperand)} {operation}\n        </div>\n        <div className=\"current-operand\">{formatOperand(currentOperand)}</div>\n      </div>\n      <button\n        className=\"span-two\"\n        onClick={() => dispatch({ type: ACTIONS.CLEAR })}\n      >\n        AC\n      </button>\n      <button onClick={() => dispatch({ type: ACTIONS.DELETE_DIGIT })}>\n        DEL\n      </button>\n      <OperationButton operation=\"รท\" dispatch={dispatch} />\n      <DigitButton digit=\"1\" dispatch={dispatch} />\n      <DigitButton digit=\"2\" dispatch={dispatch} />\n      <DigitButton digit=\"3\" dispatch={dispatch} />\n      <OperationButton operation=\"*\" dispatch={dispatch} />\n      <DigitButton digit=\"4\" dispatch={dispatch} />\n      <DigitButton digit=\"5\" dispatch={dispatch} />\n      <DigitButton digit=\"6\" dispatch={dispatch} />\n      <OperationButton operation=\"+\" dispatch={dispatch} />\n      <DigitButton digit=\"7\" dispatch={dispatch} />\n      <DigitButton digit=\"8\" dispatch={dispatch} />\n      <DigitButton digit=\"9\" dispatch={dispatch} />\n      <OperationButton operation=\"-\" dispatch={dispatch} />\n      <DigitButton digit=\".\" dispatch={dispatch} />\n      <DigitButton digit=\"0\" dispatch={dispatch} />\n      <button\n        className=\"span-two\"\n        onClick={() => dispatch({ type: ACTIONS.EVALUATE })}\n      >\n        =\n      </button>\n    </div>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}